@using System.Globalization
@using TaxCalculator.UI.Models
@inject IHttpClientFactory ClientFactory

@page "/"

<head>
    <link rel="stylesheet" href="taxCalculator.css" />
</head>

<PageTitle>Home</PageTitle>

<h1>Hello, user!</h1>

<p>Input your annual salary then click "Calculate" to get a breakdown of how much tax you might pay.</p>

<InputNumber @bind-Value="Salary" />

<button @onclick="Calculate">Calculate</button>

<div>

    @if(TaxBreakdown != null)
    {
        <dl class="taxBreakdownList">
            <dt>Gross Annual Salary</dt>
            <dd>@FormatDecimalCurrency(TaxBreakdown.GrossAnnualSalary)</dd>
            <dt>Gross Monthly Salary</dt>
            <dd>@FormatDecimalCurrency(@TaxBreakdown.GrossMonthlySalary)</dd>
            <dt>Net Annual Salary</dt>
            <dd>@FormatDecimalCurrency(@TaxBreakdown.NetAnnualSalary)</dd>
            <dt>Net Monthly Salary</dt>
            <dd>@FormatDecimalCurrency(@TaxBreakdown.NetMonthlySalary)</dd>
            <dt>Annual Tax Paid</dt>
            <dd>@FormatDecimalCurrency(@TaxBreakdown.AnnualTax)</dd>
            <dt>Monthly Tax Paid</dt>
            <dd>@FormatDecimalCurrency(@TaxBreakdown.MonthlyTax)</dd>
        </dl>
    }
</div>

@code {
    private decimal Salary { get; set; }

    private TaxBreakdownResponse? TaxBreakdown { get; set;  }

    string FormatDecimalCurrency(decimal value)
    {
        var regionCode = "en-GB";
        return value.ToString("C2", CultureInfo.CreateSpecificCulture(regionCode));
    }

    private async Task Calculate()
    {
        var client = ClientFactory.CreateClient("TaxService");

        var response = await client.PostAsJsonAsync("/TaxCalculator/GetTaxBreakdown", new { Date = DateTime.Now, Salary });

        var result = await response.Content.ReadFromJsonAsync<TaxBreakdownResponse>();

        TaxBreakdown = result;
    }
}